Test
Section: A

Question 1:
Ans.   (A) npm install express 

...........................................

Question 2:
Ans.   (A) http

............................................


Question 3:
Ans.   (B) POST

............................................


Question 4:
Ans.   (A) 3000

............................................


Question 5:
Ans.   (A) Create,Read,Update,Delete

............................................

Section: B


Question 6:
Ans.   npm init -y
       npm i express
       Create a file (server.js) 
       require= const express = require('express');
       const app = express();
       require("dotenv").config(); // For secreat any Port
       app.use(express.json()); //Use for middleware



       // Server Start
       app.listen(3000, () => {
    console.log('Server running on port 3000');
       });
      

......................................................................




Question 7:
Ans.    Create a Server basic Node.js Server Express.js

    

        Read (GET): Add routes to get all users and a single user by ID.
        app.get('/users', (req, res) => {
  res.json(users);
});

  Post(create) = Create (POST): Add a route to create a new user.
        app.post('/users', (req, res) => {
        
        });

  

        Update (PUT): Add a route to update an existing user by ID.
app.put('/users/:id', (req, res) => {

});



        Delete (DELETE): Add a route to delete a user by ID.

app.delete('/users/:id', (req, res) => {

});


......................................................................


Section C:

Question 8:
Ans.  const express = require('express');
const app = express();
require("dotenv").config();

app.use(express.json());

const port = process.env.PORT || 3000;

const users = [
  {
    id: 1,
    name: "raj",
    email: "raj@.com",
  },
  {
    id: 2,
    name: "Mahesh",
    email: "mahesh@.com",
  },
];

app.get("/", (req, res) => {
  res.send('hello node');
});

app.get('/users', (req, res) => {
  res.send(users);
});



// get data
app.get("/users/:id", (req, res) => {
  const userId = parseInt(req.params.id);
  const user = users.find((u) => u.id === userId);
  if (user) {
    res.send(user);
  } else {
    res.status(404).send({ message: "User not found" });
  }
});

// Create 
app.post("/users", (req, res) => {
  const { name, email } = req.body;
  if (!name || !email) {
    return res.status(400).json({
      message: "Name and email are required",
    });
  }

  const newUser = {
    id: users.length + 1,
    name,
    email,
  };

  users.push(newUser);
  res.status(201).json(newUser);
});



//Update
app.put('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  const { name, email } = req.body;

  let user = users.find((u) => u.id === userId);
  if (!user) {
    return res.status(404).json({
      message: 'User not found',
    });
  }

  user.name = name;
  user.email = email;

  res.json(user);
});



// Delete
app.delete("/users/:id", (req, res) => {
  const userId = parseInt(req.params.id);

  let userIndex = users.findIndex((u) => u.id === userId);

  if (userIndex === -1) {
    return res.status(404).json({
      message: "User not found",
    });
  }

  users.splice(userIndex, 1);
  res.status(200).json({
    message: "User deleted successfully",
  });
});

app.listen(port, () => {
  console.log(`Server is running on port:${port}`);
});

  

.........................................................................................................  


Question 9:
Ans. app.put('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  const { name, email } = req.body;

  let user = users.find((u) => {
    return u.id === userId
  });
  if (!user) {
    return res.status(404).json({
      message:'User not found'
    })
  }

  res.json(user);
})


.........................................................................................................  

Question 10:
Ans  connot Get /user

.........................................................................................................  



Question 13:
Ans    : Advantages of Using Express.js Over Just Node.js:

       : Simplified Routing
       : Middleware Support
       : Better Error Handling
       : Easier to Use
       : Easier REST API Creation









